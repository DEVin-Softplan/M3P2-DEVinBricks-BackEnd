// <auto-generated />
using System;
using DEVinBricks.Repositories.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEVinBricks.Migrations
{
    [DbContext(typeof(DEVinBricksContext))]
    [Migration("20220729171736_initialMigration")]
    partial class initialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Comprador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("Compradores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            CPF = "111.111.111.11",
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 908, DateTimeKind.Local).AddTicks(8589),
                            DataDeNascimento = new DateTime(2022, 7, 29, 14, 17, 35, 907, DateTimeKind.Local).AddTicks(1129),
                            Email = "comprador-fulano@gmail.com",
                            Nome = "Comprador Fulano",
                            Telefone = "11 9999-9999",
                            UsuarioInclusaoId = 1
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = 11,
                            Nome = "Rondônia",
                            UF = "RO"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Acre",
                            UF = "AC"
                        },
                        new
                        {
                            Id = 13,
                            Nome = "Amazonas",
                            UF = "AM"
                        },
                        new
                        {
                            Id = 14,
                            Nome = "Roraima",
                            UF = "RR"
                        },
                        new
                        {
                            Id = 15,
                            Nome = "Pará",
                            UF = "PA"
                        },
                        new
                        {
                            Id = 16,
                            Nome = "Amapá",
                            UF = "AP"
                        },
                        new
                        {
                            Id = 17,
                            Nome = "Tocantins",
                            UF = "TO"
                        },
                        new
                        {
                            Id = 21,
                            Nome = "Maranhão",
                            UF = "MA"
                        },
                        new
                        {
                            Id = 22,
                            Nome = "Piauí",
                            UF = "PI"
                        },
                        new
                        {
                            Id = 23,
                            Nome = "Ceará",
                            UF = "CE"
                        },
                        new
                        {
                            Id = 24,
                            Nome = "Rio Grande do Norte",
                            UF = "RN"
                        },
                        new
                        {
                            Id = 25,
                            Nome = "Paraíba",
                            UF = "PB"
                        },
                        new
                        {
                            Id = 26,
                            Nome = "Pernanmbuco",
                            UF = "PE"
                        },
                        new
                        {
                            Id = 27,
                            Nome = "Alagoas",
                            UF = "AL"
                        },
                        new
                        {
                            Id = 28,
                            Nome = "Sergipe",
                            UF = "SE"
                        },
                        new
                        {
                            Id = 29,
                            Nome = "Bahia",
                            UF = "BA"
                        },
                        new
                        {
                            Id = 31,
                            Nome = "Minas Gerais",
                            UF = "MG"
                        },
                        new
                        {
                            Id = 32,
                            Nome = "Espírito Santo",
                            UF = "ES"
                        },
                        new
                        {
                            Id = 33,
                            Nome = "Rio de Janeiro",
                            UF = "RJ"
                        },
                        new
                        {
                            Id = 35,
                            Nome = "São Paulo",
                            UF = "SP"
                        },
                        new
                        {
                            Id = 41,
                            Nome = "Paraná",
                            UF = "PR"
                        },
                        new
                        {
                            Id = 42,
                            Nome = "Santa Catarina",
                            UF = "SC"
                        },
                        new
                        {
                            Id = 43,
                            Nome = "Rio Grande do Sul",
                            UF = "RS"
                        },
                        new
                        {
                            Id = 50,
                            Nome = "Mato Grosso do Sul",
                            UF = "MS"
                        },
                        new
                        {
                            Id = 51,
                            Nome = "Mato Grosso",
                            UF = "MT"
                        },
                        new
                        {
                            Id = 52,
                            Nome = "Goiás",
                            UF = "GO"
                        },
                        new
                        {
                            Id = 53,
                            Nome = "Distrito Federal",
                            UF = "DF"
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.FreteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeEntrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<string>("Logadouro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("Fretes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bairro = "Vasco",
                            Cep = "0123456-789",
                            Cidade = "Porto Velho",
                            Complemento = "Casa 98",
                            DataDeAlteracao = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(7689),
                            DataDeEntrega = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(7077),
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(7686),
                            EstadoId = 11,
                            Logadouro = "Rua Vasco da Gama, 123",
                            UsuarioAlteracaoId = 1,
                            UsuarioInclusaoId = 1,
                            ValorFrete = 27m
                        },
                        new
                        {
                            Id = 2,
                            Bairro = "T-REX",
                            Cep = "345631-127",
                            Cidade = "Parque Jurassico",
                            Complemento = "Casa 47",
                            DataDeAlteracao = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(8372),
                            DataDeEntrega = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(8368),
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(8371),
                            EstadoId = 12,
                            Logadouro = "Rua Dino, 456",
                            UsuarioAlteracaoId = 1,
                            UsuarioInclusaoId = 1,
                            ValorFrete = 53m
                        },
                        new
                        {
                            Id = 3,
                            Bairro = "Acai",
                            Cep = "999999-888",
                            Cidade = "Manaus",
                            Complemento = "Casa 12",
                            DataDeAlteracao = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(8376),
                            DataDeEntrega = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(8374),
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 910, DateTimeKind.Local).AddTicks(8375),
                            EstadoId = 13,
                            Logadouro = "Rua do Acai, 789",
                            UsuarioAlteracaoId = 1,
                            UsuarioInclusaoId = 1,
                            ValorFrete = 32m
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlDaImagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 911, DateTimeKind.Local).AddTicks(5617),
                            Descricao = "21 polegadas",
                            Nome = "Monitor Dell",
                            UrlDaImagem = "",
                            UsuarioInclusaoId = 1,
                            Valor = 300.00m
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 911, DateTimeKind.Local).AddTicks(5639),
                            Descricao = "Mas é o mais simples da marca",
                            Nome = "Teclado Logitech",
                            UrlDaImagem = "",
                            UsuarioInclusaoId = 1,
                            Valor = 100.00m
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 911, DateTimeKind.Local).AddTicks(5641),
                            Descricao = "Também é o mais simples possível",
                            Nome = "Mouse Logitech",
                            UrlDaImagem = "",
                            UsuarioInclusaoId = 1,
                            Valor = 50.00m
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Admin = true,
                            Ativo = true,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 919, DateTimeKind.Local).AddTicks(4420),
                            Email = "admin@gmail.com",
                            Login = "admin",
                            Nome = "Admin",
                            Senha = "admin123",
                            UsuarioInclusaoId = 1
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.ValorFretePorEstadoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("ValorFreteEstados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 912, DateTimeKind.Local).AddTicks(9728),
                            EstadoId = 42,
                            UsuarioInclusaoId = 1,
                            Valor = 100m
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Venda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompradorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.Property<int>("VendedorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("Vendas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompradorId = 1,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 911, DateTimeKind.Local).AddTicks(9951),
                            UsuarioInclusaoId = 1,
                            VendedorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CompradorId = 1,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 911, DateTimeKind.Local).AddTicks(9969),
                            UsuarioInclusaoId = 1,
                            VendedorId = 1
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.VendaProduto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DataDeAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataDeInclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProduto")
                        .HasColumnType("int");

                    b.Property<int>("IdVenda")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioAlteracaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioInclusaoId")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioInclusaoId");

                    b.ToTable("VendasProdutos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 912, DateTimeKind.Local).AddTicks(5655),
                            IdProduto = 1,
                            IdVenda = 1,
                            Quantidade = 1,
                            UsuarioInclusaoId = 1,
                            Valor = 300.0
                        },
                        new
                        {
                            Id = 2,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 912, DateTimeKind.Local).AddTicks(5675),
                            IdProduto = 2,
                            IdVenda = 1,
                            Quantidade = 1,
                            UsuarioInclusaoId = 1,
                            Valor = 100.0
                        },
                        new
                        {
                            Id = 3,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 912, DateTimeKind.Local).AddTicks(5677),
                            IdProduto = 3,
                            IdVenda = 1,
                            Quantidade = 1,
                            UsuarioInclusaoId = 1,
                            Valor = 500.0
                        },
                        new
                        {
                            Id = 4,
                            DataDeInclusao = new DateTime(2022, 7, 29, 14, 17, 35, 912, DateTimeKind.Local).AddTicks(5678),
                            IdProduto = 3,
                            IdVenda = 2,
                            Quantidade = 2,
                            UsuarioInclusaoId = 1,
                            Valor = 50.0
                        });
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Comprador", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.FreteModel", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Produto", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Usuario", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.ValorFretePorEstadoModel", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.Venda", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });

            modelBuilder.Entity("DEVinBricks.Repositories.Models.VendaProduto", b =>
                {
                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("DEVinBricks.Repositories.Models.Usuario", "UsuarioInclusao")
                        .WithMany()
                        .HasForeignKey("UsuarioInclusaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UsuarioAlteracao");

                    b.Navigation("UsuarioInclusao");
                });
#pragma warning restore 612, 618
        }
    }
}
